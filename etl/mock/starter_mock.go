package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StarterMock implements etl.Starter
type StarterMock struct {
	t minimock.Tester

	funcStart          func(ctx context.Context) (err error)
	inspectFuncStart   func(ctx context.Context)
	afterStartCounter  uint64
	beforeStartCounter uint64
	StartMock          mStarterMockStart
}

// NewStarterMock returns a mock for etl.Starter
func NewStarterMock(t minimock.Tester) *StarterMock {
	m := &StarterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StartMock = mStarterMockStart{mock: m}
	m.StartMock.callArgs = []*StarterMockStartParams{}

	return m
}

type mStarterMockStart struct {
	mock               *StarterMock
	defaultExpectation *StarterMockStartExpectation
	expectations       []*StarterMockStartExpectation

	callArgs []*StarterMockStartParams
	mutex    sync.RWMutex
}

// StarterMockStartExpectation specifies expectation struct of the Starter.Start
type StarterMockStartExpectation struct {
	mock    *StarterMock
	params  *StarterMockStartParams
	results *StarterMockStartResults
	Counter uint64
}

// StarterMockStartParams contains parameters of the Starter.Start
type StarterMockStartParams struct {
	ctx context.Context
}

// StarterMockStartResults contains results of the Starter.Start
type StarterMockStartResults struct {
	err error
}

// Expect sets up expected params for Starter.Start
func (mmStart *mStarterMockStart) Expect(ctx context.Context) *mStarterMockStart {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("StarterMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &StarterMockStartExpectation{}
	}

	mmStart.defaultExpectation.params = &StarterMockStartParams{ctx}
	for _, e := range mmStart.expectations {
		if minimock.Equal(e.params, mmStart.defaultExpectation.params) {
			mmStart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStart.defaultExpectation.params)
		}
	}

	return mmStart
}

// Inspect accepts an inspector function that has same arguments as the Starter.Start
func (mmStart *mStarterMockStart) Inspect(f func(ctx context.Context)) *mStarterMockStart {
	if mmStart.mock.inspectFuncStart != nil {
		mmStart.mock.t.Fatalf("Inspect function is already set for StarterMock.Start")
	}

	mmStart.mock.inspectFuncStart = f

	return mmStart
}

// Return sets up results that will be returned by Starter.Start
func (mmStart *mStarterMockStart) Return(err error) *StarterMock {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("StarterMock.Start mock is already set by Set")
	}

	if mmStart.defaultExpectation == nil {
		mmStart.defaultExpectation = &StarterMockStartExpectation{mock: mmStart.mock}
	}
	mmStart.defaultExpectation.results = &StarterMockStartResults{err}
	return mmStart.mock
}

//Set uses given function f to mock the Starter.Start method
func (mmStart *mStarterMockStart) Set(f func(ctx context.Context) (err error)) *StarterMock {
	if mmStart.defaultExpectation != nil {
		mmStart.mock.t.Fatalf("Default expectation is already set for the Starter.Start method")
	}

	if len(mmStart.expectations) > 0 {
		mmStart.mock.t.Fatalf("Some expectations are already set for the Starter.Start method")
	}

	mmStart.mock.funcStart = f
	return mmStart.mock
}

// When sets expectation for the Starter.Start which will trigger the result defined by the following
// Then helper
func (mmStart *mStarterMockStart) When(ctx context.Context) *StarterMockStartExpectation {
	if mmStart.mock.funcStart != nil {
		mmStart.mock.t.Fatalf("StarterMock.Start mock is already set by Set")
	}

	expectation := &StarterMockStartExpectation{
		mock:   mmStart.mock,
		params: &StarterMockStartParams{ctx},
	}
	mmStart.expectations = append(mmStart.expectations, expectation)
	return expectation
}

// Then sets up Starter.Start return parameters for the expectation previously defined by the When method
func (e *StarterMockStartExpectation) Then(err error) *StarterMock {
	e.results = &StarterMockStartResults{err}
	return e.mock
}

// Start implements etl.Starter
func (mmStart *StarterMock) Start(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmStart.beforeStartCounter, 1)
	defer mm_atomic.AddUint64(&mmStart.afterStartCounter, 1)

	if mmStart.inspectFuncStart != nil {
		mmStart.inspectFuncStart(ctx)
	}

	mm_params := &StarterMockStartParams{ctx}

	// Record call args
	mmStart.StartMock.mutex.Lock()
	mmStart.StartMock.callArgs = append(mmStart.StartMock.callArgs, mm_params)
	mmStart.StartMock.mutex.Unlock()

	for _, e := range mmStart.StartMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmStart.StartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStart.StartMock.defaultExpectation.Counter, 1)
		mm_want := mmStart.StartMock.defaultExpectation.params
		mm_got := StarterMockStartParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStart.t.Errorf("StarterMock.Start got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStart.StartMock.defaultExpectation.results
		if mm_results == nil {
			mmStart.t.Fatal("No results are set for the StarterMock.Start")
		}
		return (*mm_results).err
	}
	if mmStart.funcStart != nil {
		return mmStart.funcStart(ctx)
	}
	mmStart.t.Fatalf("Unexpected call to StarterMock.Start. %v", ctx)
	return
}

// StartAfterCounter returns a count of finished StarterMock.Start invocations
func (mmStart *StarterMock) StartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.afterStartCounter)
}

// StartBeforeCounter returns a count of StarterMock.Start invocations
func (mmStart *StarterMock) StartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStart.beforeStartCounter)
}

// Calls returns a list of arguments used in each call to StarterMock.Start.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStart *mStarterMockStart) Calls() []*StarterMockStartParams {
	mmStart.mutex.RLock()

	argCopy := make([]*StarterMockStartParams, len(mmStart.callArgs))
	copy(argCopy, mmStart.callArgs)

	mmStart.mutex.RUnlock()

	return argCopy
}

// MinimockStartDone returns true if the count of the Start invocations corresponds
// the number of defined expectations
func (m *StarterMock) MinimockStartDone() bool {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		return false
	}
	return true
}

// MinimockStartInspect logs each unmet expectation
func (m *StarterMock) MinimockStartInspect() {
	for _, e := range m.StartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StarterMock.Start with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StartMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		if m.StartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StarterMock.Start")
		} else {
			m.t.Errorf("Expected call to StarterMock.Start with params: %#v", *m.StartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStart != nil && mm_atomic.LoadUint64(&m.afterStartCounter) < 1 {
		m.t.Error("Expected call to StarterMock.Start")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StarterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockStartInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StarterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StarterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStartDone()
}
