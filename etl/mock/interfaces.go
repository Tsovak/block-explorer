// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	etl "github.com/insolar/block-explorer/etl"
	exporter "github.com/insolar/insolar/ledger/heavy/exporter"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockJetDropsExtractor is a mock of JetDropsExtractor interface
type MockJetDropsExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockJetDropsExtractorMockRecorder
}

// MockJetDropsExtractorMockRecorder is the mock recorder for MockJetDropsExtractor
type MockJetDropsExtractorMockRecorder struct {
	mock *MockJetDropsExtractor
}

// NewMockJetDropsExtractor creates a new mock instance
func NewMockJetDropsExtractor(ctrl *gomock.Controller) *MockJetDropsExtractor {
	mock := &MockJetDropsExtractor{ctrl: ctrl}
	mock.recorder = &MockJetDropsExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJetDropsExtractor) EXPECT() *MockJetDropsExtractorMockRecorder {
	return m.recorder
}

// GetRecords mocks base method
func (m *MockJetDropsExtractor) GetRecords() (<-chan exporter.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords")
	ret0, _ := ret[0].(<-chan exporter.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords
func (mr *MockJetDropsExtractorMockRecorder) GetRecords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockJetDropsExtractor)(nil).GetRecords))
}

// MockConnectionManager is a mock of ConnectionManager interface
type MockConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionManagerMockRecorder
}

// MockConnectionManagerMockRecorder is the mock recorder for MockConnectionManager
type MockConnectionManagerMockRecorder struct {
	mock *MockConnectionManager
}

// NewMockConnectionManager creates a new mock instance
func NewMockConnectionManager(ctrl *gomock.Controller) *MockConnectionManager {
	mock := &MockConnectionManager{ctrl: ctrl}
	mock.recorder = &MockConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnectionManager) EXPECT() *MockConnectionManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockConnectionManager) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockConnectionManagerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockConnectionManager)(nil).Start))
}

// Stop mocks base method
func (m *MockConnectionManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockConnectionManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockConnectionManager)(nil).Stop))
}

// MockTransformer is a mock of Transformer interface
type MockTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer
type MockTransformerMockRecorder struct {
	mock *MockTransformer
}

// NewMockTransformer creates a new mock instance
func NewMockTransformer(ctrl *gomock.Controller) *MockTransformer {
	mock := &MockTransformer{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransformer) EXPECT() *MockTransformerMockRecorder {
	return m.recorder
}

// transform mocks base method
func (m *MockTransformer) transform(drop etl.PlatformJetDrops) etl.JetDrop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "transform", drop)
	ret0, _ := ret[0].(etl.JetDrop)
	return ret0
}

// transform indicates an expected call of transform
func (mr *MockTransformerMockRecorder) transform(drop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "transform", reflect.TypeOf((*MockTransformer)(nil).transform), drop)
}

// Start mocks base method
func (m *MockTransformer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockTransformerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransformer)(nil).Start))
}

// Stop mocks base method
func (m *MockTransformer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockTransformerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransformer)(nil).Stop))
}

// GetJetDropsChannel mocks base method
func (m *MockTransformer) GetJetDropsChannel() <-chan etl.JetDrop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJetDropsChannel")
	ret0, _ := ret[0].(<-chan etl.JetDrop)
	return ret0
}

// GetJetDropsChannel indicates an expected call of GetJetDropsChannel
func (mr *MockTransformerMockRecorder) GetJetDropsChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJetDropsChannel", reflect.TypeOf((*MockTransformer)(nil).GetJetDropsChannel))
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetGRPCConn mocks base method
func (m *MockClient) GetGRPCConn() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGRPCConn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GetGRPCConn indicates an expected call of GetGRPCConn
func (mr *MockClientMockRecorder) GetGRPCConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGRPCConn", reflect.TypeOf((*MockClient)(nil).GetGRPCConn))
}
