package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/block-explorer/etl/types"
)

// JetDropsExtractorMock implements interfaces.JetDropsExtractor
type JetDropsExtractorMock struct {
	t minimock.Tester

	funcGetJetDrops          func(ctx context.Context) (ch1 <-chan *types.PlatformJetDrops)
	inspectFuncGetJetDrops   func(ctx context.Context)
	afterGetJetDropsCounter  uint64
	beforeGetJetDropsCounter uint64
	GetJetDropsMock          mJetDropsExtractorMockGetJetDrops
}

// NewJetDropsExtractorMock returns a mock for interfaces.JetDropsExtractor
func NewJetDropsExtractorMock(t minimock.Tester) *JetDropsExtractorMock {
	m := &JetDropsExtractorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetJetDropsMock = mJetDropsExtractorMockGetJetDrops{mock: m}
	m.GetJetDropsMock.callArgs = []*JetDropsExtractorMockGetJetDropsParams{}

	return m
}

type mJetDropsExtractorMockGetJetDrops struct {
	mock               *JetDropsExtractorMock
	defaultExpectation *JetDropsExtractorMockGetJetDropsExpectation
	expectations       []*JetDropsExtractorMockGetJetDropsExpectation

	callArgs []*JetDropsExtractorMockGetJetDropsParams
	mutex    sync.RWMutex
}

// JetDropsExtractorMockGetJetDropsExpectation specifies expectation struct of the JetDropsExtractor.GetJetDrops
type JetDropsExtractorMockGetJetDropsExpectation struct {
	mock    *JetDropsExtractorMock
	params  *JetDropsExtractorMockGetJetDropsParams
	results *JetDropsExtractorMockGetJetDropsResults
	Counter uint64
}

// JetDropsExtractorMockGetJetDropsParams contains parameters of the JetDropsExtractor.GetJetDrops
type JetDropsExtractorMockGetJetDropsParams struct {
	ctx context.Context
}

// JetDropsExtractorMockGetJetDropsResults contains results of the JetDropsExtractor.GetJetDrops
type JetDropsExtractorMockGetJetDropsResults struct {
	ch1 <-chan *types.PlatformJetDrops
}

// Expect sets up expected params for JetDropsExtractor.GetJetDrops
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) Expect(ctx context.Context) *mJetDropsExtractorMockGetJetDrops {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("JetDropsExtractorMock.GetJetDrops mock is already set by Set")
	}

	if mmGetJetDrops.defaultExpectation == nil {
		mmGetJetDrops.defaultExpectation = &JetDropsExtractorMockGetJetDropsExpectation{}
	}

	mmGetJetDrops.defaultExpectation.params = &JetDropsExtractorMockGetJetDropsParams{ctx}
	for _, e := range mmGetJetDrops.expectations {
		if minimock.Equal(e.params, mmGetJetDrops.defaultExpectation.params) {
			mmGetJetDrops.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetJetDrops.defaultExpectation.params)
		}
	}

	return mmGetJetDrops
}

// Inspect accepts an inspector function that has same arguments as the JetDropsExtractor.GetJetDrops
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) Inspect(f func(ctx context.Context)) *mJetDropsExtractorMockGetJetDrops {
	if mmGetJetDrops.mock.inspectFuncGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("Inspect function is already set for JetDropsExtractorMock.GetJetDrops")
	}

	mmGetJetDrops.mock.inspectFuncGetJetDrops = f

	return mmGetJetDrops
}

// Return sets up results that will be returned by JetDropsExtractor.GetJetDrops
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) Return(ch1 <-chan *types.PlatformJetDrops) *JetDropsExtractorMock {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("JetDropsExtractorMock.GetJetDrops mock is already set by Set")
	}

	if mmGetJetDrops.defaultExpectation == nil {
		mmGetJetDrops.defaultExpectation = &JetDropsExtractorMockGetJetDropsExpectation{mock: mmGetJetDrops.mock}
	}
	mmGetJetDrops.defaultExpectation.results = &JetDropsExtractorMockGetJetDropsResults{ch1}
	return mmGetJetDrops.mock
}

//Set uses given function f to mock the JetDropsExtractor.GetJetDrops method
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) Set(f func(ctx context.Context) (ch1 <-chan *types.PlatformJetDrops)) *JetDropsExtractorMock {
	if mmGetJetDrops.defaultExpectation != nil {
		mmGetJetDrops.mock.t.Fatalf("Default expectation is already set for the JetDropsExtractor.GetJetDrops method")
	}

	if len(mmGetJetDrops.expectations) > 0 {
		mmGetJetDrops.mock.t.Fatalf("Some expectations are already set for the JetDropsExtractor.GetJetDrops method")
	}

	mmGetJetDrops.mock.funcGetJetDrops = f
	return mmGetJetDrops.mock
}

// When sets expectation for the JetDropsExtractor.GetJetDrops which will trigger the result defined by the following
// Then helper
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) When(ctx context.Context) *JetDropsExtractorMockGetJetDropsExpectation {
	if mmGetJetDrops.mock.funcGetJetDrops != nil {
		mmGetJetDrops.mock.t.Fatalf("JetDropsExtractorMock.GetJetDrops mock is already set by Set")
	}

	expectation := &JetDropsExtractorMockGetJetDropsExpectation{
		mock:   mmGetJetDrops.mock,
		params: &JetDropsExtractorMockGetJetDropsParams{ctx},
	}
	mmGetJetDrops.expectations = append(mmGetJetDrops.expectations, expectation)
	return expectation
}

// Then sets up JetDropsExtractor.GetJetDrops return parameters for the expectation previously defined by the When method
func (e *JetDropsExtractorMockGetJetDropsExpectation) Then(ch1 <-chan *types.PlatformJetDrops) *JetDropsExtractorMock {
	e.results = &JetDropsExtractorMockGetJetDropsResults{ch1}
	return e.mock
}

// GetJetDrops implements interfaces.JetDropsExtractor
func (mmGetJetDrops *JetDropsExtractorMock) GetJetDrops(ctx context.Context) (ch1 <-chan *types.PlatformJetDrops) {
	mm_atomic.AddUint64(&mmGetJetDrops.beforeGetJetDropsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetJetDrops.afterGetJetDropsCounter, 1)

	if mmGetJetDrops.inspectFuncGetJetDrops != nil {
		mmGetJetDrops.inspectFuncGetJetDrops(ctx)
	}

	mm_params := &JetDropsExtractorMockGetJetDropsParams{ctx}

	// Record call args
	mmGetJetDrops.GetJetDropsMock.mutex.Lock()
	mmGetJetDrops.GetJetDropsMock.callArgs = append(mmGetJetDrops.GetJetDropsMock.callArgs, mm_params)
	mmGetJetDrops.GetJetDropsMock.mutex.Unlock()

	for _, e := range mmGetJetDrops.GetJetDropsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ch1
		}
	}

	if mmGetJetDrops.GetJetDropsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetJetDrops.GetJetDropsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetJetDrops.GetJetDropsMock.defaultExpectation.params
		mm_got := JetDropsExtractorMockGetJetDropsParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetJetDrops.t.Errorf("JetDropsExtractorMock.GetJetDrops got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetJetDrops.GetJetDropsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetJetDrops.t.Fatal("No results are set for the JetDropsExtractorMock.GetJetDrops")
		}
		return (*mm_results).ch1
	}
	if mmGetJetDrops.funcGetJetDrops != nil {
		return mmGetJetDrops.funcGetJetDrops(ctx)
	}
	mmGetJetDrops.t.Fatalf("Unexpected call to JetDropsExtractorMock.GetJetDrops. %v", ctx)
	return
}

// GetJetDropsAfterCounter returns a count of finished JetDropsExtractorMock.GetJetDrops invocations
func (mmGetJetDrops *JetDropsExtractorMock) GetJetDropsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetJetDrops.afterGetJetDropsCounter)
}

// GetJetDropsBeforeCounter returns a count of JetDropsExtractorMock.GetJetDrops invocations
func (mmGetJetDrops *JetDropsExtractorMock) GetJetDropsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetJetDrops.beforeGetJetDropsCounter)
}

// Calls returns a list of arguments used in each call to JetDropsExtractorMock.GetJetDrops.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetJetDrops *mJetDropsExtractorMockGetJetDrops) Calls() []*JetDropsExtractorMockGetJetDropsParams {
	mmGetJetDrops.mutex.RLock()

	argCopy := make([]*JetDropsExtractorMockGetJetDropsParams, len(mmGetJetDrops.callArgs))
	copy(argCopy, mmGetJetDrops.callArgs)

	mmGetJetDrops.mutex.RUnlock()

	return argCopy
}

// MinimockGetJetDropsDone returns true if the count of the GetJetDrops invocations corresponds
// the number of defined expectations
func (m *JetDropsExtractorMock) MinimockGetJetDropsDone() bool {
	for _, e := range m.GetJetDropsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetJetDropsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetJetDrops != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetJetDropsInspect logs each unmet expectation
func (m *JetDropsExtractorMock) MinimockGetJetDropsInspect() {
	for _, e := range m.GetJetDropsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JetDropsExtractorMock.GetJetDrops with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetJetDropsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		if m.GetJetDropsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to JetDropsExtractorMock.GetJetDrops")
		} else {
			m.t.Errorf("Expected call to JetDropsExtractorMock.GetJetDrops with params: %#v", *m.GetJetDropsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetJetDrops != nil && mm_atomic.LoadUint64(&m.afterGetJetDropsCounter) < 1 {
		m.t.Error("Expected call to JetDropsExtractorMock.GetJetDrops")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JetDropsExtractorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetJetDropsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JetDropsExtractorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JetDropsExtractorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetJetDropsDone()
}
