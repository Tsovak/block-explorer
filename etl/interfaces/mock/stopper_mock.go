package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StopperMock implements interfaces.Stopper
type StopperMock struct {
	t minimock.Tester

	funcStop          func(ctx context.Context) (err error)
	inspectFuncStop   func(ctx context.Context)
	afterStopCounter  uint64
	beforeStopCounter uint64
	StopMock          mStopperMockStop
}

// NewStopperMock returns a mock for interfaces.Stopper
func NewStopperMock(t minimock.Tester) *StopperMock {
	m := &StopperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StopMock = mStopperMockStop{mock: m}
	m.StopMock.callArgs = []*StopperMockStopParams{}

	return m
}

type mStopperMockStop struct {
	mock               *StopperMock
	defaultExpectation *StopperMockStopExpectation
	expectations       []*StopperMockStopExpectation

	callArgs []*StopperMockStopParams
	mutex    sync.RWMutex
}

// StopperMockStopExpectation specifies expectation struct of the Stopper.Stop
type StopperMockStopExpectation struct {
	mock    *StopperMock
	params  *StopperMockStopParams
	results *StopperMockStopResults
	Counter uint64
}

// StopperMockStopParams contains parameters of the Stopper.Stop
type StopperMockStopParams struct {
	ctx context.Context
}

// StopperMockStopResults contains results of the Stopper.Stop
type StopperMockStopResults struct {
	err error
}

// Expect sets up expected params for Stopper.Stop
func (mmStop *mStopperMockStop) Expect(ctx context.Context) *mStopperMockStop {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("StopperMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &StopperMockStopExpectation{}
	}

	mmStop.defaultExpectation.params = &StopperMockStopParams{ctx}
	for _, e := range mmStop.expectations {
		if minimock.Equal(e.params, mmStop.defaultExpectation.params) {
			mmStop.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStop.defaultExpectation.params)
		}
	}

	return mmStop
}

// Inspect accepts an inspector function that has same arguments as the Stopper.Stop
func (mmStop *mStopperMockStop) Inspect(f func(ctx context.Context)) *mStopperMockStop {
	if mmStop.mock.inspectFuncStop != nil {
		mmStop.mock.t.Fatalf("Inspect function is already set for StopperMock.Stop")
	}

	mmStop.mock.inspectFuncStop = f

	return mmStop
}

// Return sets up results that will be returned by Stopper.Stop
func (mmStop *mStopperMockStop) Return(err error) *StopperMock {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("StopperMock.Stop mock is already set by Set")
	}

	if mmStop.defaultExpectation == nil {
		mmStop.defaultExpectation = &StopperMockStopExpectation{mock: mmStop.mock}
	}
	mmStop.defaultExpectation.results = &StopperMockStopResults{err}
	return mmStop.mock
}

//Set uses given function f to mock the Stopper.Stop method
func (mmStop *mStopperMockStop) Set(f func(ctx context.Context) (err error)) *StopperMock {
	if mmStop.defaultExpectation != nil {
		mmStop.mock.t.Fatalf("Default expectation is already set for the Stopper.Stop method")
	}

	if len(mmStop.expectations) > 0 {
		mmStop.mock.t.Fatalf("Some expectations are already set for the Stopper.Stop method")
	}

	mmStop.mock.funcStop = f
	return mmStop.mock
}

// When sets expectation for the Stopper.Stop which will trigger the result defined by the following
// Then helper
func (mmStop *mStopperMockStop) When(ctx context.Context) *StopperMockStopExpectation {
	if mmStop.mock.funcStop != nil {
		mmStop.mock.t.Fatalf("StopperMock.Stop mock is already set by Set")
	}

	expectation := &StopperMockStopExpectation{
		mock:   mmStop.mock,
		params: &StopperMockStopParams{ctx},
	}
	mmStop.expectations = append(mmStop.expectations, expectation)
	return expectation
}

// Then sets up Stopper.Stop return parameters for the expectation previously defined by the When method
func (e *StopperMockStopExpectation) Then(err error) *StopperMock {
	e.results = &StopperMockStopResults{err}
	return e.mock
}

// Stop implements interfaces.Stopper
func (mmStop *StopperMock) Stop(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmStop.beforeStopCounter, 1)
	defer mm_atomic.AddUint64(&mmStop.afterStopCounter, 1)

	if mmStop.inspectFuncStop != nil {
		mmStop.inspectFuncStop(ctx)
	}

	mm_params := &StopperMockStopParams{ctx}

	// Record call args
	mmStop.StopMock.mutex.Lock()
	mmStop.StopMock.callArgs = append(mmStop.StopMock.callArgs, mm_params)
	mmStop.StopMock.mutex.Unlock()

	for _, e := range mmStop.StopMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmStop.StopMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStop.StopMock.defaultExpectation.Counter, 1)
		mm_want := mmStop.StopMock.defaultExpectation.params
		mm_got := StopperMockStopParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStop.t.Errorf("StopperMock.Stop got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStop.StopMock.defaultExpectation.results
		if mm_results == nil {
			mmStop.t.Fatal("No results are set for the StopperMock.Stop")
		}
		return (*mm_results).err
	}
	if mmStop.funcStop != nil {
		return mmStop.funcStop(ctx)
	}
	mmStop.t.Fatalf("Unexpected call to StopperMock.Stop. %v", ctx)
	return
}

// StopAfterCounter returns a count of finished StopperMock.Stop invocations
func (mmStop *StopperMock) StopAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.afterStopCounter)
}

// StopBeforeCounter returns a count of StopperMock.Stop invocations
func (mmStop *StopperMock) StopBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStop.beforeStopCounter)
}

// Calls returns a list of arguments used in each call to StopperMock.Stop.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStop *mStopperMockStop) Calls() []*StopperMockStopParams {
	mmStop.mutex.RLock()

	argCopy := make([]*StopperMockStopParams, len(mmStop.callArgs))
	copy(argCopy, mmStop.callArgs)

	mmStop.mutex.RUnlock()

	return argCopy
}

// MinimockStopDone returns true if the count of the Stop invocations corresponds
// the number of defined expectations
func (m *StopperMock) MinimockStopDone() bool {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		return false
	}
	return true
}

// MinimockStopInspect logs each unmet expectation
func (m *StopperMock) MinimockStopInspect() {
	for _, e := range m.StopMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StopperMock.Stop with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.StopMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		if m.StopMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StopperMock.Stop")
		} else {
			m.t.Errorf("Expected call to StopperMock.Stop with params: %#v", *m.StopMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStop != nil && mm_atomic.LoadUint64(&m.afterStopCounter) < 1 {
		m.t.Error("Expected call to StopperMock.Stop")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StopperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockStopInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StopperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StopperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStopDone()
}
