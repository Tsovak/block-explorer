package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"google.golang.org/grpc"
)

// ClientMock implements interfaces.Client
type ClientMock struct {
	t minimock.Tester

	funcGetGRPCConn          func() (cp1 *grpc.ClientConn)
	inspectFuncGetGRPCConn   func()
	afterGetGRPCConnCounter  uint64
	beforeGetGRPCConnCounter uint64
	GetGRPCConnMock          mClientMockGetGRPCConn
}

// NewClientMock returns a mock for interfaces.Client
func NewClientMock(t minimock.Tester) *ClientMock {
	m := &ClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetGRPCConnMock = mClientMockGetGRPCConn{mock: m}

	return m
}

type mClientMockGetGRPCConn struct {
	mock               *ClientMock
	defaultExpectation *ClientMockGetGRPCConnExpectation
	expectations       []*ClientMockGetGRPCConnExpectation
}

// ClientMockGetGRPCConnExpectation specifies expectation struct of the Client.GetGRPCConn
type ClientMockGetGRPCConnExpectation struct {
	mock *ClientMock

	results *ClientMockGetGRPCConnResults
	Counter uint64
}

// ClientMockGetGRPCConnResults contains results of the Client.GetGRPCConn
type ClientMockGetGRPCConnResults struct {
	cp1 *grpc.ClientConn
}

// Expect sets up expected params for Client.GetGRPCConn
func (mmGetGRPCConn *mClientMockGetGRPCConn) Expect() *mClientMockGetGRPCConn {
	if mmGetGRPCConn.mock.funcGetGRPCConn != nil {
		mmGetGRPCConn.mock.t.Fatalf("ClientMock.GetGRPCConn mock is already set by Set")
	}

	if mmGetGRPCConn.defaultExpectation == nil {
		mmGetGRPCConn.defaultExpectation = &ClientMockGetGRPCConnExpectation{}
	}

	return mmGetGRPCConn
}

// Inspect accepts an inspector function that has same arguments as the Client.GetGRPCConn
func (mmGetGRPCConn *mClientMockGetGRPCConn) Inspect(f func()) *mClientMockGetGRPCConn {
	if mmGetGRPCConn.mock.inspectFuncGetGRPCConn != nil {
		mmGetGRPCConn.mock.t.Fatalf("Inspect function is already set for ClientMock.GetGRPCConn")
	}

	mmGetGRPCConn.mock.inspectFuncGetGRPCConn = f

	return mmGetGRPCConn
}

// Return sets up results that will be returned by Client.GetGRPCConn
func (mmGetGRPCConn *mClientMockGetGRPCConn) Return(cp1 *grpc.ClientConn) *ClientMock {
	if mmGetGRPCConn.mock.funcGetGRPCConn != nil {
		mmGetGRPCConn.mock.t.Fatalf("ClientMock.GetGRPCConn mock is already set by Set")
	}

	if mmGetGRPCConn.defaultExpectation == nil {
		mmGetGRPCConn.defaultExpectation = &ClientMockGetGRPCConnExpectation{mock: mmGetGRPCConn.mock}
	}
	mmGetGRPCConn.defaultExpectation.results = &ClientMockGetGRPCConnResults{cp1}
	return mmGetGRPCConn.mock
}

//Set uses given function f to mock the Client.GetGRPCConn method
func (mmGetGRPCConn *mClientMockGetGRPCConn) Set(f func() (cp1 *grpc.ClientConn)) *ClientMock {
	if mmGetGRPCConn.defaultExpectation != nil {
		mmGetGRPCConn.mock.t.Fatalf("Default expectation is already set for the Client.GetGRPCConn method")
	}

	if len(mmGetGRPCConn.expectations) > 0 {
		mmGetGRPCConn.mock.t.Fatalf("Some expectations are already set for the Client.GetGRPCConn method")
	}

	mmGetGRPCConn.mock.funcGetGRPCConn = f
	return mmGetGRPCConn.mock
}

// GetGRPCConn implements interfaces.Client
func (mmGetGRPCConn *ClientMock) GetGRPCConn() (cp1 *grpc.ClientConn) {
	mm_atomic.AddUint64(&mmGetGRPCConn.beforeGetGRPCConnCounter, 1)
	defer mm_atomic.AddUint64(&mmGetGRPCConn.afterGetGRPCConnCounter, 1)

	if mmGetGRPCConn.inspectFuncGetGRPCConn != nil {
		mmGetGRPCConn.inspectFuncGetGRPCConn()
	}

	if mmGetGRPCConn.GetGRPCConnMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetGRPCConn.GetGRPCConnMock.defaultExpectation.Counter, 1)

		mm_results := mmGetGRPCConn.GetGRPCConnMock.defaultExpectation.results
		if mm_results == nil {
			mmGetGRPCConn.t.Fatal("No results are set for the ClientMock.GetGRPCConn")
		}
		return (*mm_results).cp1
	}
	if mmGetGRPCConn.funcGetGRPCConn != nil {
		return mmGetGRPCConn.funcGetGRPCConn()
	}
	mmGetGRPCConn.t.Fatalf("Unexpected call to ClientMock.GetGRPCConn.")
	return
}

// GetGRPCConnAfterCounter returns a count of finished ClientMock.GetGRPCConn invocations
func (mmGetGRPCConn *ClientMock) GetGRPCConnAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetGRPCConn.afterGetGRPCConnCounter)
}

// GetGRPCConnBeforeCounter returns a count of ClientMock.GetGRPCConn invocations
func (mmGetGRPCConn *ClientMock) GetGRPCConnBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetGRPCConn.beforeGetGRPCConnCounter)
}

// MinimockGetGRPCConnDone returns true if the count of the GetGRPCConn invocations corresponds
// the number of defined expectations
func (m *ClientMock) MinimockGetGRPCConnDone() bool {
	for _, e := range m.GetGRPCConnMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetGRPCConnMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetGRPCConnCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetGRPCConn != nil && mm_atomic.LoadUint64(&m.afterGetGRPCConnCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetGRPCConnInspect logs each unmet expectation
func (m *ClientMock) MinimockGetGRPCConnInspect() {
	for _, e := range m.GetGRPCConnMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ClientMock.GetGRPCConn")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetGRPCConnMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetGRPCConnCounter) < 1 {
		m.t.Error("Expected call to ClientMock.GetGRPCConn")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetGRPCConn != nil && mm_atomic.LoadUint64(&m.afterGetGRPCConnCounter) < 1 {
		m.t.Error("Expected call to ClientMock.GetGRPCConn")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetGRPCConnInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetGRPCConnDone()
}
