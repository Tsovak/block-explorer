package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/block-explorer/etl/models"
)

// StorageExtractorMock implements interfaces.StorageExtractor
type StorageExtractorMock struct {
	t minimock.Tester

	funcGetRecordsByPrototype          func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (ra1 []models.Record, err error)
	inspectFuncGetRecordsByPrototype   func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32)
	afterGetRecordsByPrototypeCounter  uint64
	beforeGetRecordsByPrototypeCounter uint64
	GetRecordsByPrototypeMock          mStorageExtractorMockGetRecordsByPrototype
}

// NewStorageExtractorMock returns a mock for interfaces.StorageExtractor
func NewStorageExtractorMock(t minimock.Tester) *StorageExtractorMock {
	m := &StorageExtractorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetRecordsByPrototypeMock = mStorageExtractorMockGetRecordsByPrototype{mock: m}
	m.GetRecordsByPrototypeMock.callArgs = []*StorageExtractorMockGetRecordsByPrototypeParams{}

	return m
}

type mStorageExtractorMockGetRecordsByPrototype struct {
	mock               *StorageExtractorMock
	defaultExpectation *StorageExtractorMockGetRecordsByPrototypeExpectation
	expectations       []*StorageExtractorMockGetRecordsByPrototypeExpectation

	callArgs []*StorageExtractorMockGetRecordsByPrototypeParams
	mutex    sync.RWMutex
}

// StorageExtractorMockGetRecordsByPrototypeExpectation specifies expectation struct of the StorageExtractor.GetRecordsByPrototype
type StorageExtractorMockGetRecordsByPrototypeExpectation struct {
	mock    *StorageExtractorMock
	params  *StorageExtractorMockGetRecordsByPrototypeParams
	results *StorageExtractorMockGetRecordsByPrototypeResults
	Counter uint64
}

// StorageExtractorMockGetRecordsByPrototypeParams contains parameters of the StorageExtractor.GetRecordsByPrototype
type StorageExtractorMockGetRecordsByPrototypeParams struct {
	prototypeRef [][]byte
	pulseNumber  int64
	limit        uint32
	offset       uint32
}

// StorageExtractorMockGetRecordsByPrototypeResults contains results of the StorageExtractor.GetRecordsByPrototype
type StorageExtractorMockGetRecordsByPrototypeResults struct {
	ra1 []models.Record
	err error
}

// Expect sets up expected params for StorageExtractor.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) Expect(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) *mStorageExtractorMockGetRecordsByPrototype {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExtractorMock.GetRecordsByPrototype mock is already set by Set")
	}

	if mmGetRecordsByPrototype.defaultExpectation == nil {
		mmGetRecordsByPrototype.defaultExpectation = &StorageExtractorMockGetRecordsByPrototypeExpectation{}
	}

	mmGetRecordsByPrototype.defaultExpectation.params = &StorageExtractorMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}
	for _, e := range mmGetRecordsByPrototype.expectations {
		if minimock.Equal(e.params, mmGetRecordsByPrototype.defaultExpectation.params) {
			mmGetRecordsByPrototype.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRecordsByPrototype.defaultExpectation.params)
		}
	}

	return mmGetRecordsByPrototype
}

// Inspect accepts an inspector function that has same arguments as the StorageExtractor.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) Inspect(f func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32)) *mStorageExtractorMockGetRecordsByPrototype {
	if mmGetRecordsByPrototype.mock.inspectFuncGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("Inspect function is already set for StorageExtractorMock.GetRecordsByPrototype")
	}

	mmGetRecordsByPrototype.mock.inspectFuncGetRecordsByPrototype = f

	return mmGetRecordsByPrototype
}

// Return sets up results that will be returned by StorageExtractor.GetRecordsByPrototype
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) Return(ra1 []models.Record, err error) *StorageExtractorMock {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExtractorMock.GetRecordsByPrototype mock is already set by Set")
	}

	if mmGetRecordsByPrototype.defaultExpectation == nil {
		mmGetRecordsByPrototype.defaultExpectation = &StorageExtractorMockGetRecordsByPrototypeExpectation{mock: mmGetRecordsByPrototype.mock}
	}
	mmGetRecordsByPrototype.defaultExpectation.results = &StorageExtractorMockGetRecordsByPrototypeResults{ra1, err}
	return mmGetRecordsByPrototype.mock
}

//Set uses given function f to mock the StorageExtractor.GetRecordsByPrototype method
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) Set(f func(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (ra1 []models.Record, err error)) *StorageExtractorMock {
	if mmGetRecordsByPrototype.defaultExpectation != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("Default expectation is already set for the StorageExtractor.GetRecordsByPrototype method")
	}

	if len(mmGetRecordsByPrototype.expectations) > 0 {
		mmGetRecordsByPrototype.mock.t.Fatalf("Some expectations are already set for the StorageExtractor.GetRecordsByPrototype method")
	}

	mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype = f
	return mmGetRecordsByPrototype.mock
}

// When sets expectation for the StorageExtractor.GetRecordsByPrototype which will trigger the result defined by the following
// Then helper
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) When(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) *StorageExtractorMockGetRecordsByPrototypeExpectation {
	if mmGetRecordsByPrototype.mock.funcGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.mock.t.Fatalf("StorageExtractorMock.GetRecordsByPrototype mock is already set by Set")
	}

	expectation := &StorageExtractorMockGetRecordsByPrototypeExpectation{
		mock:   mmGetRecordsByPrototype.mock,
		params: &StorageExtractorMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset},
	}
	mmGetRecordsByPrototype.expectations = append(mmGetRecordsByPrototype.expectations, expectation)
	return expectation
}

// Then sets up StorageExtractor.GetRecordsByPrototype return parameters for the expectation previously defined by the When method
func (e *StorageExtractorMockGetRecordsByPrototypeExpectation) Then(ra1 []models.Record, err error) *StorageExtractorMock {
	e.results = &StorageExtractorMockGetRecordsByPrototypeResults{ra1, err}
	return e.mock
}

// GetRecordsByPrototype implements interfaces.StorageExtractor
func (mmGetRecordsByPrototype *StorageExtractorMock) GetRecordsByPrototype(prototypeRef [][]byte, pulseNumber int64, limit uint32, offset uint32) (ra1 []models.Record, err error) {
	mm_atomic.AddUint64(&mmGetRecordsByPrototype.beforeGetRecordsByPrototypeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRecordsByPrototype.afterGetRecordsByPrototypeCounter, 1)

	if mmGetRecordsByPrototype.inspectFuncGetRecordsByPrototype != nil {
		mmGetRecordsByPrototype.inspectFuncGetRecordsByPrototype(prototypeRef, pulseNumber, limit, offset)
	}

	mm_params := &StorageExtractorMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}

	// Record call args
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.mutex.Lock()
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.callArgs = append(mmGetRecordsByPrototype.GetRecordsByPrototypeMock.callArgs, mm_params)
	mmGetRecordsByPrototype.GetRecordsByPrototypeMock.mutex.Unlock()

	for _, e := range mmGetRecordsByPrototype.GetRecordsByPrototypeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1, e.results.err
		}
	}

	if mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.params
		mm_got := StorageExtractorMockGetRecordsByPrototypeParams{prototypeRef, pulseNumber, limit, offset}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRecordsByPrototype.t.Errorf("StorageExtractorMock.GetRecordsByPrototype got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRecordsByPrototype.GetRecordsByPrototypeMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRecordsByPrototype.t.Fatal("No results are set for the StorageExtractorMock.GetRecordsByPrototype")
		}
		return (*mm_results).ra1, (*mm_results).err
	}
	if mmGetRecordsByPrototype.funcGetRecordsByPrototype != nil {
		return mmGetRecordsByPrototype.funcGetRecordsByPrototype(prototypeRef, pulseNumber, limit, offset)
	}
	mmGetRecordsByPrototype.t.Fatalf("Unexpected call to StorageExtractorMock.GetRecordsByPrototype. %v %v %v %v", prototypeRef, pulseNumber, limit, offset)
	return
}

// GetRecordsByPrototypeAfterCounter returns a count of finished StorageExtractorMock.GetRecordsByPrototype invocations
func (mmGetRecordsByPrototype *StorageExtractorMock) GetRecordsByPrototypeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecordsByPrototype.afterGetRecordsByPrototypeCounter)
}

// GetRecordsByPrototypeBeforeCounter returns a count of StorageExtractorMock.GetRecordsByPrototype invocations
func (mmGetRecordsByPrototype *StorageExtractorMock) GetRecordsByPrototypeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecordsByPrototype.beforeGetRecordsByPrototypeCounter)
}

// Calls returns a list of arguments used in each call to StorageExtractorMock.GetRecordsByPrototype.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRecordsByPrototype *mStorageExtractorMockGetRecordsByPrototype) Calls() []*StorageExtractorMockGetRecordsByPrototypeParams {
	mmGetRecordsByPrototype.mutex.RLock()

	argCopy := make([]*StorageExtractorMockGetRecordsByPrototypeParams, len(mmGetRecordsByPrototype.callArgs))
	copy(argCopy, mmGetRecordsByPrototype.callArgs)

	mmGetRecordsByPrototype.mutex.RUnlock()

	return argCopy
}

// MinimockGetRecordsByPrototypeDone returns true if the count of the GetRecordsByPrototype invocations corresponds
// the number of defined expectations
func (m *StorageExtractorMock) MinimockGetRecordsByPrototypeDone() bool {
	for _, e := range m.GetRecordsByPrototypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordsByPrototypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecordsByPrototype != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRecordsByPrototypeInspect logs each unmet expectation
func (m *StorageExtractorMock) MinimockGetRecordsByPrototypeInspect() {
	for _, e := range m.GetRecordsByPrototypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StorageExtractorMock.GetRecordsByPrototype with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordsByPrototypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		if m.GetRecordsByPrototypeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StorageExtractorMock.GetRecordsByPrototype")
		} else {
			m.t.Errorf("Expected call to StorageExtractorMock.GetRecordsByPrototype with params: %#v", *m.GetRecordsByPrototypeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecordsByPrototype != nil && mm_atomic.LoadUint64(&m.afterGetRecordsByPrototypeCounter) < 1 {
		m.t.Error("Expected call to StorageExtractorMock.GetRecordsByPrototype")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StorageExtractorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetRecordsByPrototypeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StorageExtractorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StorageExtractorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetRecordsByPrototypeDone()
}
